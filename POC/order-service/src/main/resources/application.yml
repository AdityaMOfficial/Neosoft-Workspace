server:
    port: 8081
spring:
    application:
        name: ORDER-SERVICE
    cloud:
        consul:
            config:
                enabled: true
            discovery:
                instance-id: ${spring.application.name}:${random.value}
                prefer-ip-address: true
            host: localhost
            port: 7200
    config:
        import: optional:consul:${spring.cloud.consul.host}:${spring.cloud.consul.port}/dev-config
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: test@1234
        url: jdbc:mysql://${MYSQL_HOST:localhost}:3306/order_service
        username: root
    jpa:
        hibernate:
            ddl-auto: update
        show-sql: true
    security:
        oauth2:
#            client:
#                provider:
#                    my-client:
#                        issuerUri: http://localhost:7800/realms/poc-realm
#                registration:
#                    my-client:
#                        authorizationGrantType: authorization_code
#                        clientId: my-client
#                        clientSecret: TGyd7N71m6iDpkeh78rQ178pqZE8bm6U
#                        redirectUri: http://localhost:9000/login/oauth2/code/my-client
#                        scope:
#                            - openid
#                            - roles
            resourceserver:
                jwt:
                    issuer-uri: http://localhost:7800/realms/poc-realm
                    jwk-set-uri: http://localhost:7800/realms/poc-realm/protocol/openid-connect/certs
                opaquetoken:
                    client-id: my-client
                    client-secret: TGyd7N71m6iDpkeh78rQ178pqZE8bm6U
                    introspection-uri: http://localhost:7800/realms/poc-realm/protocol/openid-connect/token/introspect

management:
    health:
        circuit-breakers:
            enabled: true
    endpoints:
      web:
        exposure:
          include:
              - '*'
    endpoint:
      health:
        show-details: always

resilience4j.circuitbreaker:
    instances:
        inventory:
            registerHealthIndicator: true
            event-consumer-buffer-size: 10
            slidingWindowType: COUNT_BASED  #will count the failed calls and success calls
            slidingWindowSize: 5
            permittedNumberOfCallsInHalfOpenState: 3
#            slidingWindowType: TIME_BASED
#            minimumNumberOfCalls: 20
            waitDurationInOpenState: 5s   #only wait for 5s in open state and go back to closed
            failureRateThreshold: 50   #50%
            automaticTransitionFromOpenToHalfOpenEnabled: true
#            eventConsumerBufferSize: 10
#            recordFailurePredicate: io.github.robwin.exception.RecordFailurePredicate


#timeout properties
#resilience4j:
#  timelimiter:
#    instances:
#      inventory:
#          timeoutDuration: 3s


#resilience4j retry properties
#resilience4j:
#  retry:
#    instances:
#      inventory:
#          maxAttempts: 3
#          waitDuration: 5s